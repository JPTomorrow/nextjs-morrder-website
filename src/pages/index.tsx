import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import React, { useRef, useState } from "react";

import Particles from "react-tsparticles";
import particleOptions from "../data/tsparticles-bg-config.json";
import { loadFull } from "tsparticles";

import WaveText from "../components/WaveText";
import ScrollLink from "../components/ScrollLink";

import { GoArchive } from "react-icons/go";
import { AiOutlineHome, AiOutlineMail } from "react-icons/ai";
import { BsPerson } from "react-icons/bs";
import StarHeader from "../components/StarHeader";
import SkillBadges from "../components/SkillBadges";
import RoundedSeparator from "../components/RoundedSeparator";
import Project from "../components/Project";

const ParticleBg = () => {
  const particlesInit = async (main: any) => {
    await loadFull(main);
  };

  const particlesLoaded = (container: any) => {};

  return (
    <Particles
      className="absolute top-0 left-0 h-full"
      options={particleOptions as any}
      init={particlesInit}
      loaded={particlesLoaded as any}
    />
  );
};

const quote_lines = [
  "Knowledge must continually be renewed...",
  "It resembles a statue of marble...",
  "threatened by the shiftinge sands",
];

const proffesionalProjects = {
  bomGenerator: {
    title: "Bill of Materials Generator",
    subTitle: "WPF Application",
    skillsUsed: "C#, WPF",
    description: [
      "Uses Revit API for interoperability with Autodesk Revit",
      "Generates Bill of Materials from the 3D CAD models that Revit produces",
      "Systems for calculating wire and Hanger systems for MEP conduit racks",
    ],
    image: "/bom-generator.png",
    githubLink:
      "https://github.com/JPTomorrow/revit-bill-of-materials-generator",
  },
  marathonTrainingVideos: {
    title: "Marathon Training Videos",
    subTitle: "Website",
    skillsUsed: "Vue, Microsoft Azure, API's",
    description: [
      "A website for training marathon field workers in construction safety",
      "The employees must watch a video and complete a test",
      "The results of that test will be emailed to their supervisor for review",
      "Uses Microsoft azure to host the website and Azure functions to send the email to a supervisor",
    ],
    image: "/marathon-training-videos-pic.png",
    githubLink: "https://github.com/JPTomorrow/marathon-training-videos",
  },
  bluebeamInWall: {
    title: "Bluebeam In Wall / Fire Alarm BOM Generator",
    subTitle: "CLI Application",
    skillsUsed: "C#, .NET Core, PDF format parsing",
    description: [
      "Generates a Bill of Materials for In Wall devices and Fire Alarm Systems using PDF's generated by Bluebeam",
      "Bluebeam has a system for custom markups that is used to build the in wall device boxes",
      "",
      "Uses Microsoft azure to host the website and Azure functions to send the email to a supervisor",
    ],
    image: "/bluebeam-in-wall-fire-alarm.png",
    githubLink: "https://github.com/JPTomorrow/bluebeam-pthree-in-wall",
  },
};

const Email = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const send = trpc.useMutation(["email.sendEmail"]);

  const sendMail = async () => {
    const body = {
      senderName: name,
      fromEmail: email,
      message: message,
    };

    await send.mutateAsync(body).then((res) => {
      console.log(res);
    });

    setName("");
    setEmail("");
    setMessage("");
  };

  return (
    <>
      <StarHeader className="pt-20">Contact Me</StarHeader>
      <div className="flex flex-col mt-[75px]">
        <input
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="Name"
          className="contact-input"
        />
        <input
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email"
          className="mt-[25px] contact-input"
        />
        <textarea
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="Message"
          className="mt-[25px] contact-input"
        />
        <div className="mt-[5px] w-[400px] mx-auto">
          <button
            className="float-left border-[1px] border-teal-500  bg-teal-500 bg-opacity-30 rounded-md px-4 text-white mt-2 hover:bg-teal-800 transition-all duration-75"
            onClick={() => sendMail()}
          >
            Submit
          </button>
        </div>
      </div>

      <RoundedSeparator className="fill-gray-900" />
    </>
  );
};

interface Props {
  scrollRef: React.LegacyRef<HTMLDivElement>;
}

const Home: NextPage<Props> = (props) => {
  const landingRef = React.createRef<HTMLDivElement>();
  const newsRef = React.createRef<HTMLDivElement>();
  const projectsRef = React.createRef<HTMLDivElement>();
  const contactRef = React.createRef<HTMLDivElement>();
  const ScrollToPage = (ref: any) =>
    ref.current.scrollIntoView({ behavior: "smooth" });

  return (
    <>
      <Head>
        <title>Justin Morrow Personal Website</title>
        <meta name="description" content="Justin Morrow Personal Website" />
        <link rel="icon" href="/logo.png" />
      </Head>
      <div className="nav">
        <ScrollLink
          onClick={() => ScrollToPage(landingRef)}
          icon={<AiOutlineHome size="24" />}
          tooltip="Home"
        />
        <ScrollLink
          onClick={() => ScrollToPage(newsRef)}
          icon={<BsPerson size="24" />}
          tooltip="About"
        />
        <ScrollLink
          onClick={() => ScrollToPage(projectsRef)}
          icon={<GoArchive size="24" />}
          tooltip="Projects"
        />
        <ScrollLink
          onClick={() => ScrollToPage(contactRef)}
          icon={<AiOutlineMail size="24" />}
          tooltip="Contact Me"
        />
      </div>
      <div className="space-bg" ref={landingRef}>
        <div className="homepage-banner">
          <WaveText
            startDelay={0.5}
            startHidden={true}
            loop={false}
            className="banner-name-text"
          >
            Justin Morrow
          </WaveText>
          <WaveText
            startDelay={0.8}
            startHidden={true}
            loop={false}
            className="banner-name-text text-xl"
          >
            Software Developer
          </WaveText>
          <WaveText
            startDelay={2.0}
            startHidden={true}
            className="banner-quote-text mt-5"
          >
            {quote_lines[0] as string}
          </WaveText>
          <WaveText
            startDelay={2.5}
            startHidden={true}
            className="banner-quote-text"
          >
            {quote_lines[1] as string}
          </WaveText>
          <WaveText
            startDelay={3.0}
            startHidden={true}
            className="banner-quote-text"
          >
            {quote_lines[2] as string}
          </WaveText>
        </div>
        <ParticleBg />
      </div>
      {/* ABOUT PAGE */}
      <div
        className="relative text-center bg-gray-900 pb-10 h-full"
        ref={newsRef}
      >
        <StarHeader className="pt-20">About Me</StarHeader>
        <div className="mission-statement">
          Software Developer with greater than 4 years of hands-on experience
          designing and integrating software to meet a client's needs who is a
          self-taught professional out of passion for programming. Currently
          seeking a role to expand knowledge of back-end technologies, and
          testing.
        </div>
        <StarHeader>Skills</StarHeader>
        <div className="my-[75px]">
          <SkillBadges />
        </div>
        <RoundedSeparator className="fill-gray-900" />
      </div>
      {/* PROJECTS PAGE */}
      <div
        ref={projectsRef}
        className="relative text-center bg-gray-800 pb-10 h-full border-t-2"
      >
        <StarHeader className="pt-20">Professional Projects</StarHeader>
        <div className="flex flex-col items-center gap-2 mt-[75px] mb-[100px]">
          {Object.values(proffesionalProjects).map((project, i: number) => (
            <Project
              key={i}
              className=""
              title={project["title"]}
              subTitle={project["subTitle"]}
              skillsUsed={project["skillsUsed"]}
              description={project["description"]}
              image={project["image"]}
              githubLink={project["githubLink"]}
            />
          ))}
        </div>
        <RoundedSeparator className="fill-gray-800" />
      </div>
      {/* CONTACT PAGE */}
      <div
        ref={contactRef}
        className="relative text-center bg-gray-900 pb-10 h-full border-t-2"
      >
        <Email />
      </div>
      );
    </>
  );
};

export default Home;
